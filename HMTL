<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Etamin Digital - Custom Software & AI Solutions</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;600;700;800;900&family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
    <style>
        /* ... (sizning mavjud stylingiz) ... */

        /* Glitch effect uchun yangi style qo'shamiz */
        .glitch-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -2;
            background: #000000;
            overflow: hidden;
        }

        .glitch-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .vignette-outer {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            background: radial-gradient(circle, rgba(0,0,0,0) 60%, rgba(64, 150, 202, 0.7) 100%);
        }

        .vignette-center {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            background: radial-gradient(circle, rgb(54, 137, 163) 0%, rgba(0,0,0,0) 60%);
        }
    </style>
</head>
<body>
<!-- Glitch effektini qo'shamiz -->
<div class="glitch-container">
    <canvas class="glitch-canvas" id="glitchCanvas"></canvas>
    <div class="vignette-outer"></div>
    <div class="vignette-center"></div>
</div>

<div class="animated-bg"></div>

<!-- ... (qolgan mavjud HTML kodlaringiz) ... -->

<script>
    // Glitch effekti uchun JavaScript
    const glitchCanvas = document.getElementById('glitchCanvas');
    const glitchCtx = glitchCanvas.getContext('2d');

    const glitchColors = ['#6c63ff', '#ff6584', '#00f5ff'];
    const fontSize = 16;
    const charWidth = 10;
    const charHeight = 20;
    const glitchSpeed = 50;

    const lettersAndSymbols = [
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
        '!', '@', '#', '$', '&', '*', '(', ')', '-', '_', '+', '=', '/',
        '[', ']', '{', '}', ';', ':', '<', '>', ',', '0', '1', '2', '3',
        '4', '5', '6', '7', '8', '9'
    ];

    let letters = [];
    let grid = { columns: 0, rows: 0 };
    let lastGlitchTime = Date.now();

    function getRandomChar() {
        return lettersAndSymbols[Math.floor(Math.random() * lettersAndSymbols.length)];
    }

    function getRandomColor() {
        return glitchColors[Math.floor(Math.random() * glitchColors.length)];
    }

    function hexToRgb(hex) {
        const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }

    function interpolateColor(start, end, factor) {
        const result = {
            r: Math.round(start.r + (end.r - start.r) * factor),
            g: Math.round(start.g + (end.g - start.g) * factor),
            b: Math.round(start.b + (end.b - start.b) * factor),
        };
        return `rgb(${result.r}, ${result.g}, ${result.b})`;
    }

    function calculateGrid(width, height) {
        const columns = Math.ceil(width / charWidth);
        const rows = Math.ceil(height / charHeight);
        return { columns, rows };
    }

    function initializeLetters(columns, rows) {
        grid = { columns, rows };
        const totalLetters = columns * rows;
        letters = Array.from({ length: totalLetters }, () => ({
            char: getRandomChar(),
            color: getRandomColor(),
            targetColor: getRandomColor(),
            colorProgress: 1,
        }));
    }

    function resizeGlitchCanvas() {
        const dpr = window.devicePixelRatio || 1;
        const width = window.innerWidth;
        const height = window.innerHeight;

        glitchCanvas.width = width * dpr;
        glitchCanvas.height = height * dpr;
        glitchCanvas.style.width = `${width}px`;
        glitchCanvas.style.height = `${height}px`;

        glitchCtx.setTransform(dpr, 0, 0, dpr, 0, 0);

        const newGrid = calculateGrid(width, height);
        initializeLetters(newGrid.columns, newGrid.rows);

        drawLetters();
    }

    function drawLetters() {
        const { width, height } = glitchCanvas.getBoundingClientRect();
        glitchCtx.clearRect(0, 0, width, height);
        glitchCtx.font = `${fontSize}px monospace`;
        glitchCtx.textBaseline = 'top';

        letters.forEach((letter, index) => {
            const x = (index % grid.columns) * charWidth;
            const y = Math.floor(index / grid.columns) * charHeight;
            glitchCtx.fillStyle = letter.color;
            glitchCtx.fillText(letter.char, x, y);
        });
    }

    function updateLetters() {
        if (!letters || letters.length === 0) return;

        const updateCount = Math.max(1, Math.floor(letters.length * 0.05));

        for (let i = 0; i < updateCount; i++) {
            const index = Math.floor(Math.random() * letters.length);
            if (!letters[index]) continue;

            letters[index].char = getRandomChar();
            letters[index].targetColor = getRandomColor();
            letters[index].colorProgress = 0;
        }
    }

    function handleSmoothTransitions() {
        let needsRedraw = false;
        letters.forEach((letter) => {
            if (letter.colorProgress < 1) {
                letter.colorProgress += 0.05;
                if (letter.colorProgress > 1) letter.colorProgress = 1;

                const startRgb = hexToRgb(letter.color);
                const endRgb = hexToRgb(letter.targetColor);
                if (startRgb && endRgb) {
                    letter.color = interpolateColor(startRgb, endRgb, letter.colorProgress);
                    needsRedraw = true;
                }
            }
        });

        if (needsRedraw) {
            drawLetters();
        }
    }

    function animateGlitch() {
        const now = Date.now();
        if (now - lastGlitchTime >= glitchSpeed) {
            updateLetters();
            drawLetters();
            lastGlitchTime = now;
        }

        handleSmoothTransitions();
        requestAnimationFrame(animateGlitch);
    }

    // Glitch effektini ishga tushiramiz
    window.addEventListener('load', () => {
        resizeGlitchCanvas();
        animateGlitch();
    });

    window.addEventListener('resize', () => {
        let resizeTimeout;
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            resizeGlitchCanvas();
        }, 100);
    });

    // ... (sizning mavjud JavaScript kodlaringiz) ...
</script>
</body>
</html>
